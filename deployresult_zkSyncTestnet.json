{
 "contracts": {
  "MockERC20": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xdEc0ad57B37bA07a219aac2cBBBe9205eE2fD565",
   "abi": [
    "constructor()",
    "event Approval(address indexed owner, address indexed spender, uint256 value)",
    "event Transfer(address indexed from, address indexed to, uint256 value)",
    "function allowance(address, address) view returns (uint256)",
    "function approve(address spender, uint256 value) returns (bool)",
    "function balanceOf(address) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function mint(address to, uint256 value)",
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function totalSupply() view returns (uint256)",
    "function transfer(address to, uint256 value) returns (bool)",
    "function transferFrom(address from, address to, uint256 value) returns (bool)"
   ]
  },
  "MockERC721_V1": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xc69eE7CC5d9ac94657d316bb7A276De1Be0C0eBC",
   "abi": [
    "constructor()",
    "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
    "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
    "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
    "function approve(address to, uint256 tokenId)",
    "function balanceOf(address owner) view returns (uint256)",
    "function burn(uint256 tokenId)",
    "function getApproved(uint256 tokenId) view returns (address)",
    "function isApprovedForAll(address owner, address operator) view returns (bool)",
    "function mint(address to) returns (uint256 tokenId)",
    "function name() view returns (string)",
    "function ownerOf(uint256 tokenId) view returns (address)",
    "function safeTransferFrom(address from, address to, uint256 tokenId)",
    "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
    "function setApprovalForAll(address operator, bool approved)",
    "function symbol() view returns (string)",
    "function tokenURI(uint256 tokenId) view returns (string)",
    "function transferFrom(address from, address to, uint256 tokenId)"
   ]
  },
  "MockERC1155_V1": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x6D2Fed5F1FD7a5841ac0B29A73C52DF603DbD406",
   "abi": [
    "constructor()",
    "event ApprovalForAll(address indexed account, address indexed operator, bool approved)",
    "event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)",
    "event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)",
    "event URI(string value, uint256 indexed id)",
    "function balanceOf(address account, uint256 id) view returns (uint256)",
    "function balanceOfBatch(address[] accounts, uint256[] ids) view returns (uint256[])",
    "function burn(address from, uint256 id, uint256 amount)",
    "function burnBatch(address from, uint256[] ids, uint256[] amounts)",
    "function isApprovedForAll(address account, address operator) view returns (bool)",
    "function mint(address to, uint256 id, uint256 amount, bytes data)",
    "function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data)",
    "function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data)",
    "function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data)",
    "function setApprovalForAll(address operator, bool approved)",
    "function uri(uint256) view returns (string)"
   ]
  },
  "MockTPO": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x972B598992e8826B9ca08d57930D398268DDC77C",
   "abi": [
    "function getERC20TokenUSDPrice(address tokenAddr) pure returns (uint256)"
   ]
  },
  "MysteryBox1155": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x5C05c2cb67b448C0048e78CcBD09310dec5F7B30",
   "abi": [
    "constructor(string uri)",
    "event ApprovalForAll(address indexed account, address indexed operator, bool approved)",
    "event Extendable1155Modify(uint256 indexed id, bytes extendData)",
    "event Paused(address account)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)",
    "event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)",
    "event URI(string value, uint256 indexed id)",
    "event Unpaused(address account)",
    "function DATA_ROLE() view returns (bytes32)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MINTER_ROLE() view returns (bytes32)",
    "function PAUSER_ROLE() view returns (bytes32)",
    "function _royalties() view returns (uint256)",
    "function balanceOf(address account, uint256 id) view returns (uint256)",
    "function balanceOfBatch(address[] accounts, uint256[] ids) view returns (uint256[])",
    "function burn(address account, uint256 id, uint256 value)",
    "function burnBatch(address account, uint256[] ids, uint256[] values)",
    "function exists(uint256 id) view returns (bool)",
    "function fetchIncome(address erc20)",
    "function fetchIncomeEth()",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function getTokenExtendNftData(uint256 id) view returns (bytes)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function isApprovedForAll(address account, address operator) view returns (bool)",
    "function mint(address to, uint256 id, uint256 amount, bytes data)",
    "function mintBatch(address to, uint256[] ids, uint256[] amounts, bytes data)",
    "function modifyExtendData(uint256 id, bytes extendData)",
    "function name() view returns (string)",
    "function pause()",
    "function paused() view returns (bool)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function royaltyInfo(uint256, uint256 value) view returns (address receiver, uint256 royaltyAmount)",
    "function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data)",
    "function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data)",
    "function setApprovalForAll(address operator, bool approved)",
    "function setRoyalties(uint256 royalties)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function symbol() view returns (string)",
    "function totalSupply(uint256 id) view returns (uint256)",
    "function unpause()",
    "function updateURI(string newuri)",
    "function uri(uint256) view returns (string)"
   ]
  },
  "MysteryBoxShop": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x4a502612910dA88F56E74D6BA0c941Bd41DA86d1",
   "abi": [
    "constructor()",
    "event BatchBuyMysteryBox(address indexed userAddr, string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, bool isBurn, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData, uint256 count)",
    "event BuyMysteryBox(address indexed userAddr, string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, bool isBurn, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "event Paused(address account)",
    "event PerAddrBuyCountChange(string indexed pairName, address indexed userAddr, uint32 count)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "event SetOnSaleMBCheckCondition(string indexed pairName, uint256 price, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit)",
    "event SetOnSaleMBCountleft(string indexed pairName, uint256 countLeft)",
    "event SetOnSaleMysterBox(string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, bool isBurn, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "event Unpaused(address account)",
    "event UnsetOnSaleMysterBox(string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, bool isBurn, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function OPERATER_ROLE() view returns (bytes32)",
    "function PAUSER_ROLE() view returns (bytes32)",
    "function _onSaleMysterBoxDatas(string) view returns (uint64 nextRenewTime, uint256 countLeft)",
    "function _onSaleMysterBoxes(string) view returns (address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, bool isBurn, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit)",
    "function _perAddrBuyCount(string, address) view returns (uint32)",
    "function _receiveIncomAddress() view returns (address)",
    "function _whitelists(uint32, address) view returns (bool)",
    "function addWitheList(uint32 wlId, address[] whitelist)",
    "function batchBuyMysterBox(string pairName, uint32 count) payable",
    "function buyMysteryBox(string pairName) payable",
    "function fetchIncome(address tokenAddr, uint256 value)",
    "function fetchIncome1155(address tokenAddr, uint256 tokenId, uint256 value)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function pause()",
    "function paused() view returns (bool)",
    "function removeWhiteList(uint32 wlId, address[] whitelist)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setOnSaleMBCheckCondition(string pairName, uint256 price, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit)",
    "function setOnSaleMBCountleft(string pairName, uint256 countLeft)",
    "function setOnSaleMysteryBox(string pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, bool isBurn, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "function setReceiveIncomeAddress(address incomAddr)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function unpause()",
    "function unsetOnSaleMysteryBox(string pairName)"
   ]
  },
  "MysteryBoxShopV1": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xef12f0651251b455AF730688f65E57586f1A51DE",
   "abi": [
    "constructor()",
    "event BatchBuyMysteryBox(address indexed userAddr, string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData, uint256 count)",
    "event BuyMysteryBox(address indexed userAddr, string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "event Paused(address account)",
    "event PerAddrBuyCountChange(string indexed pairName, address indexed userAddr, uint32 count)",
    "event PerAddrDiscountCountChange(uint32 discountId, address indexed userAddr, uint32 count)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "event SetOnSaleMBCheckCondition(string indexed pairName, uint256 price, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId)",
    "event SetOnSaleMBCountleft(string indexed pairName, uint256 countLeft)",
    "event SetOnSaleMysterBox(string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "event Unpaused(address account)",
    "event UnsetOnSaleMysterBox(string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function OPERATER_ROLE() view returns (bytes32)",
    "function PAUSER_ROLE() view returns (bytes32)",
    "function _discountAddress(uint32, address) view returns (uint16 discount, uint32 maxCount)",
    "function _discountBuyCount(uint32, address) view returns (uint32)",
    "function _onSaleMysterBoxDatas(string) view returns (uint64 nextRenewTime, uint256 countLeft)",
    "function _onSaleMysterBoxes(string) view returns (address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId)",
    "function _perAddrBuyCount(string, address) view returns (uint32)",
    "function _receiveIncomAddress() view returns (address)",
    "function _whitelists(uint32, address) view returns (bool)",
    "function addDiscountAddress(uint32 daId, tuple(uint16 discount, uint32 maxCount, address addr)[] discountAddrList)",
    "function addWitheList(uint32 wlId, address[] whitelist)",
    "function batchBuyMysterBox(string pairName, uint32 count) payable",
    "function buyMysteryBox(string pairName) payable",
    "function fetchIncome(address tokenAddr, uint256 value)",
    "function fetchIncome1155(address tokenAddr, uint256 tokenId, uint256 value)",
    "function getDiscountCountBuyCount(uint32 daId, address addr) view returns (uint32)",
    "function getDiscountInfo(uint32 daId, address addr) view returns (uint16 discount, uint32 maxCount)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function isDiscountAddress(uint32 daId, address addr) view returns (bool)",
    "function pause()",
    "function paused() view returns (bool)",
    "function removeDiscountAddress(uint32 daId, address[] discountAddrList)",
    "function removeWhiteList(uint32 wlId, address[] whitelist)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setOnSaleMBCheckCondition(string pairName, uint256 price, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId)",
    "function setOnSaleMBCountleft(string pairName, uint256 countLeft)",
    "function setOnSaleMysteryBox(string pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "function setReceiveIncomeAddress(address incomAddr)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function unpause()",
    "function unsetOnSaleMysteryBox(string pairName)"
   ]
  },
  "MysteryBoxShopV2": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x4c482F3504Cf0C135D5B7c8FeAf1097be276d560",
   "abi": [
    "constructor()",
    "event BatchBuyMysteryBox(address indexed userAddr, string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData, uint256 count)",
    "event BuyMysteryBox(address indexed userAddr, string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "event Paused(address account)",
    "event PerAddrBuyCountChange(string indexed pairName, address indexed userAddr, uint32 count)",
    "event PerAddrDiscountCountChange(uint32 discountId, address indexed userAddr, uint32 count)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "event SetOnSaleMBCheckCondition(string indexed pairName, uint256 price, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId)",
    "event SetOnSaleMBCountleft(string indexed pairName, uint256 countLeft)",
    "event SetOnSaleMysterBox(string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "event Unpaused(address account)",
    "event UnsetOnSaleMysterBox(string indexed pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function OPERATER_ROLE() view returns (bytes32)",
    "function PAUSER_ROLE() view returns (bytes32)",
    "function _discountAddress(uint32, address) view returns (uint16 discount, uint32 maxCount)",
    "function _discountBuyCount(uint32, address) view returns (uint32)",
    "function _onSaleMysterBoxDatas(string) view returns (uint64 nextRenewTime, uint256 countLeft)",
    "function _onSaleMysterBoxes(string) view returns (address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId)",
    "function _perAddrBuyCount(string, address) view returns (uint32)",
    "function _receiveIncomAddress() view returns (address)",
    "function _whitelists(uint32, address) view returns (bool)",
    "function addDiscountAddress(uint32 daId, tuple(uint16 discount, uint32 maxCount, address addr)[] discountAddrList)",
    "function addWitheList(uint32 wlId, address[] whitelist)",
    "function batchBuyMysterBox(string pairName, uint32 count) payable",
    "function buyMysteryBox(string pairName) payable",
    "function fetchIncome(address tokenAddr, uint256 value)",
    "function fetchIncome1155(address tokenAddr, uint256 tokenId, uint256 value)",
    "function getDiscountCountBuyCount(uint32 daId, address addr) view returns (uint32)",
    "function getDiscountInfo(uint32 daId, address addr) view returns (uint16 discount, uint32 maxCount)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function isDiscountAddress(uint32 daId, address addr) view returns (bool)",
    "function pause()",
    "function paused() view returns (bool)",
    "function removeDiscountAddress(uint32 daId, address[] discountAddrList)",
    "function removeWhiteList(uint32 wlId, address[] whitelist)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setOnSaleMBCheckCondition(string pairName, uint256 price, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId)",
    "function setOnSaleMBCountleft(string pairName, uint256 countLeft)",
    "function setOnSaleMysteryBox(string pairName, tuple(address mysteryBox1155Addr, uint256 mbTokenId, address tokenAddr, uint256 tokenId, uint256 price, uint64 beginTime, uint64 endTime, uint64 renewTime, uint256 renewCount, uint32 whitelistId, address nftholderCheck, uint32 perAddrLimit, uint32 discountId) saleConfig, tuple(uint64 nextRenewTime, uint256 countLeft) saleData)",
    "function setReceiveIncomeAddress(address incomAddr)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function unpause()",
    "function unsetOnSaleMysteryBox(string pairName)"
   ]
  },
  "RandomPoolLib": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x7516E6067fbD99eFe37F01710662A6e353B8dfb0",
   "abi": []
  },
  "Random": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x294150FdB0d3FFBdA672C93CA5A2d32cD1c9ae3a",
   "abi": [
    "event OracleRandRequest(uint256 reqid, address indexed requestAddress)",
    "event OracleRandResponse(uint256 reqid, uint256 randnum, address indexed requestAddress)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function ORACLE_ROLE() view returns (bytes32)",
    "function fulfillOracleRand(uint256 reqid, uint256 randnum) returns (uint256 rand)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function isSealed(address addr) view returns (bool)",
    "function nextRand(uint32 index, uint256 randomNum) view returns (uint256 ret)",
    "function oracleRand() returns (uint256)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function sealedRand() returns (uint256 ret)",
    "function seedRand(uint256 inputSeed) returns (uint256 ret)",
    "function setRandomSeed(uint256 s)",
    "function setSealed()",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)"
   ]
  },
  "HeroNFT": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xb28D5F60AF29EdDc7a998e6b0305E7BE2D2B46a3",
   "abi": [
    "constructor(uint256 idStart, string name, string symbol, string baseTokenURI)",
    "event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)",
    "event ApprovalForAll(address indexed owner, address indexed operator, bool approved)",
    "event HeroNFTMint(address indexed to, uint256 indexed tokenId, tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data)",
    "event HeroNFTModified(uint256 indexed tokenId, uint256 writeableData)",
    "event NFTExtendModify(uint256 indexed tokenId, string extendName, bytes extendData)",
    "event NFTExtendName(string extendName, bytes32 nameBytes)",
    "event NFTFreeze(uint256 indexed tokenId, int32 freezeRef)",
    "event Paused(address account)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
    "event Unpaused(address account)",
    "function DATA_ROLE() view returns (bytes32)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function FREEZE_ROLE() view returns (bytes32)",
    "function MINTER_ROLE() view returns (bytes32)",
    "function PAUSER_ROLE() view returns (bytes32)",
    "function _attrSource() view returns (address)",
    "function _codec() view returns (address)",
    "function _royalties() view returns (uint256)",
    "function addTokenExtendNftData(uint256 tokenId, string extendName, bytes extendData)",
    "function approve(address to, uint256 tokenId)",
    "function balanceOf(address owner) view returns (uint256)",
    "function burn(uint256 tokenId)",
    "function exists(uint256 tokenId) view returns (bool)",
    "function extendNftData(string extendName)",
    "function fetchIncome(address erc20)",
    "function fetchIncomeEth()",
    "function freeze(uint256 tokenId)",
    "function getApproved(uint256 tokenId) view returns (address)",
    "function getAttrSource() view returns (address a)",
    "function getCodec() view returns (address c)",
    "function getNftData(uint256 tokenId) view returns (tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function getTokenExtendNftData(uint256 tokenId, string extendName) view returns (bytes)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function isApprovedForAll(address owner, address operator) view returns (bool)",
    "function isFreezed(uint256 tokenId) view returns (bool)",
    "function mint(address to, tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) returns (uint256)",
    "function mintFixedID(uint256 id, address to, tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) returns (uint256)",
    "function modNftData(uint256 tokenId, uint256 writeableData)",
    "function modifyTokenExtendNftData(uint256 tokenId, string extendName, bytes extendData)",
    "function name() view returns (string)",
    "function notFreezed(uint256 tokenId) view returns (bool)",
    "function ownerOf(uint256 tokenId) view returns (address)",
    "function pause()",
    "function paused() view returns (bool)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function royaltyInfo(uint256, uint256 value) view returns (address receiver, uint256 royaltyAmount)",
    "function safeTransferFrom(address from, address to, uint256 tokenId)",
    "function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data)",
    "function setApprovalForAll(address operator, bool approved)",
    "function setAttrSource(address a)",
    "function setCodec(address c)",
    "function setRoyalties(uint256 royalties)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function symbol() view returns (string)",
    "function tokenByIndex(uint256 index) view returns (uint256)",
    "function tokenOfOwnerByIndex(address owner, uint256 index) view returns (uint256)",
    "function tokenURI(uint256 tokenId) view returns (string)",
    "function totalSupply() view returns (uint256)",
    "function transferFrom(address from, address to, uint256 tokenId)",
    "function unfreeze(uint256 tokenId)",
    "function unpause()",
    "function updateURI(string baseTokenURI)"
   ]
  },
  "HeroNFTCodec_V1": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x763e054b1BcA56645036515f41717BFD357b0A0c",
   "abi": [
    "function fromHeroNftFixedAnWriteableData(tuple(uint8 job, uint8 grade, uint32 minerAttr, uint32 battleAttr) fdata, tuple(uint8 starLevel, uint16 level) wdata) pure returns (tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) basedata)",
    "function fromHeroNftFixedData(tuple(uint8 job, uint8 grade, uint32 minerAttr, uint32 battleAttr) data) pure returns (tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) basedata)",
    "function fromHeroPetNftFixedAnWriteableData(tuple(uint8 petId, uint8 avatar_slot_1_2, uint8 avatar_slot_3_4, uint8 avatar_slot_5_6, uint32 minerAttr, uint32 battleAttr) fdata, tuple(uint16 level) wdata) pure returns (tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) basedata)",
    "function fromHeroPetNftFixedData(tuple(uint8 petId, uint8 avatar_slot_1_2, uint8 avatar_slot_3_4, uint8 avatar_slot_5_6, uint32 minerAttr, uint32 battleAttr) data) pure returns (tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) basedata)",
    "function getCharacterId(tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) pure returns (uint16 characterId)",
    "function getHeroNftFixedData(tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) pure returns (tuple(uint8 job, uint8 grade, uint32 minerAttr, uint32 battleAttr) hndata)",
    "function getHeroNftWriteableData(tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) pure returns (tuple(uint8 starLevel, uint16 level) hndata)",
    "function getHeroPetNftFixedData(tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) pure returns (tuple(uint8 petId, uint8 avatar_slot_1_2, uint8 avatar_slot_3_4, uint8 avatar_slot_5_6, uint32 minerAttr, uint32 battleAttr) hndata)",
    "function getHeroPetNftWriteableData(tuple(uint8 mintType, uint16 nftType, uint232 fixedData, uint256 writeableData) data) pure returns (tuple(uint16 level) hndata)",
    "function toHeroNftWriteableData(tuple(uint8 starLevel, uint16 level) hndata) pure returns (uint256 wdata)",
    "function toHeroPetNftWriteableData(tuple(uint16 level) hndata) pure returns (uint256 wdata)"
   ]
  },
  "NFTAttrSource_V1": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xac1483eaA4D37280Cbfb7B00a0920D2a2733777b",
   "abi": [
    "constructor()",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function _heroBattleAttrs(uint32) view returns (uint32 attack, uint32 defense, uint32 hitpoint, uint16 miss, uint16 doge, uint16 critical, uint16 decritical, uint16 speed)",
    "function _heroBattleFactor() view returns (uint16)",
    "function _heroMineAttrs(uint32) view returns (uint32 produceRate, uint32 minerRate, uint32 shopRate, uint16 sailerSpeedPer, uint16 sailerLoadPer, uint16 sailerRangePer, uint32 hashRate)",
    "function _heroMineFactor() view returns (uint16)",
    "function _shipBattleAttrs(uint32) view returns (uint32 attack, uint32 defense, uint32 hitpoint, uint16 miss, uint16 doge, uint16 critical, uint16 decritical, uint16 speed, uint8 maxSailer)",
    "function _shipBattleFactor() view returns (uint16)",
    "function _shipMineAttrs(uint32) view returns (uint16 speed, uint32 maxLoad, uint32 maxRange, uint32 foodPerMile, uint8 maxSailer, uint32 hashRate)",
    "function _shipMineFactor() view returns (uint16)",
    "function getHeroBattleAttr(uint32 battleAttr, uint16 level) view returns (tuple(uint32 attack, uint32 defense, uint32 hitpoint, uint16 miss, uint16 doge, uint16 critical, uint16 decritical, uint16 speed) data)",
    "function getHeroMinerAttr(uint32 mineAttr, uint16 starLevel) view returns (tuple(uint32 produceRate, uint32 minerRate, uint32 shopRate, uint16 sailerSpeedPer, uint16 sailerLoadPer, uint16 sailerRangePer, uint32 hashRate) data)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function getShipBattleAttr(uint32 battleAttr, uint16 level) view returns (tuple(uint32 attack, uint32 defense, uint32 hitpoint, uint16 miss, uint16 doge, uint16 critical, uint16 decritical, uint16 speed, uint8 maxSailer) data)",
    "function getShipMinerAttr(uint32 mineAttr, uint16 level) view returns (tuple(uint16 speed, uint32 maxLoad, uint32 maxRange, uint32 foodPerMile, uint8 maxSailer, uint32 hashRate) data)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setHeroBattleAttr(uint32[] battleAttrs, tuple(uint32 attack, uint32 defense, uint32 hitpoint, uint16 miss, uint16 doge, uint16 critical, uint16 decritical, uint16 speed)[] datas)",
    "function setHeroMinerAttr(uint32[] mineAttrs, tuple(uint32 produceRate, uint32 minerRate, uint32 shopRate, uint16 sailerSpeedPer, uint16 sailerLoadPer, uint16 sailerRangePer, uint32 hashRate)[] datas)",
    "function setLevelUpFactor(uint16 heroMineFactor, uint16 heroBattleFactor, uint16 shipMineFactor, uint16 shipBattleFactor)",
    "function setShipBattleAttr(uint32[] battleAttrs, tuple(uint32 attack, uint32 defense, uint32 hitpoint, uint16 miss, uint16 doge, uint16 critical, uint16 decritical, uint16 speed, uint8 maxSailer)[] datas)",
    "function setShipMinerAttr(uint32[] mineAttrs, tuple(uint16 speed, uint32 maxLoad, uint32 maxRange, uint32 foodPerMile, uint8 maxSailer, uint32 hashRate)[] datas)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)"
   ]
  },
  "HeroNFTMysteryBox": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0x9248b3e656C843830b71904067c424838D5C6b73",
   "abi": [
    "event BatchOpenMysteryBox(address indexed owner, uint256 indexed mbTokenId, tuple(address addr, uint256[] tokenIds, uint256[] tokenValues)[] sfts, tuple(address addr, uint256[] tokenIds)[] nfts)",
    "event BatchOracleOpenMysteryBox(uint256 oracleRequestId, uint256 indexed mbTokenId, address indexed owner, uint8 batchCount)",
    "event OpenMysteryBox(address indexed owner, uint256 indexed mbTokenId, tuple(address addr, uint256[] tokenIds, uint256[] tokenValues)[] sfts, tuple(address addr, uint256[] tokenIds)[] nfts)",
    "event OracleOpenMysteryBox(uint256 oracleRequestId, uint256 indexed mbTokenId, address indexed owner)",
    "event Paused(address account)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "event Unpaused(address account)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function PAUSER_ROLE() view returns (bytes32)",
    "function RAND_ROLE() view returns (bytes32)",
    "function _mb1155() view returns (address)",
    "function _oracleUserData(uint256) view returns (address owner, uint32 randomType, uint32 mysteryType, uint8 count, uint256 tokenId)",
    "function batchOracleOpenMysteryBox(uint256 tokenId, uint8 batchCount) payable",
    "function getName() returns (string)",
    "function getNftAddress() view returns (address)",
    "function getRandomSource(uint32 randomType) view returns (address)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function oracleOpenMysteryBox(uint256 tokenId) payable",
    "function oracleRandResponse(uint256 reqid, uint256 randnum)",
    "function pause()",
    "function paused() view returns (bool)",
    "function removeMethodExtraFee(uint8 methodKey)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setMethodExtraFee(uint8 methodKey, uint256 value, address target)",
    "function setNftAddress(address nftAddr)",
    "function setRandomSource(uint32 randomType, address randomSrc)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function unpause()"
   ]
  },
  "HeroNFTMysteryBoxRandSource": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xe35A683EebDF87a56Beac0922F84f38B40781b73",
   "abi": [
    "constructor(address heroNftAddr)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function MINTER_ROLE() view returns (bytes32)",
    "function RANDOM_ROLE() view returns (bytes32)",
    "function _heroNFTContract() view returns (address)",
    "function addPool(uint32 poolID, tuple(uint32 rate, uint256 rangMin, uint256 rangMax)[] randSetArray)",
    "function batchRandomAndMint(uint256 r, uint32 mysteryTp, address to, uint8 batchCount) returns (tuple(address addr, uint256[] tokenIds, uint256[] tokenValues)[] sfts, tuple(address addr, uint256[] tokenIds)[] nfts)",
    "function getPool(uint32 poolID) view returns (tuple(bool exist, tuple(uint32 totalRate, tuple(uint32 rate, uint256 rangMin, uint256 rangMax)[] pool) randPool))",
    "function getRandSource() view returns (address)",
    "function getRandomSet(uint32 mysteryTp) view returns (uint32[] poolIds)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasPool(uint32 poolID) view returns (bool)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function modifyPool(uint32 poolID, tuple(uint32 rate, uint256 rangMin, uint256 rangMax)[] randSetArray)",
    "function randomAndMint(uint256 r, uint32 mysteryTp, address to) returns (tuple(address addr, uint256[] tokenIds, uint256[] tokenValues)[] sfts, tuple(address addr, uint256[] tokenIds)[] nfts)",
    "function removePool(uint32 poolID)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setRandSource(address randAddr)",
    "function setRandomSet(uint32 mbTypeID, uint32[] poolIds)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function unsetRandomSet(uint32 mysteryTp)"
   ]
  },
  "HeroPetNFTMysteryBoxRandSource": {
   "deployer": "0x9812752121fb9eBEc49A4B8153240866156E87C5",
   "addr": "0xF4B2956B253e4AbcE774F73f38DA4A20A001e702",
   "abi": [
    "constructor(address heroNftAddr)",
    "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
    "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
    "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
    "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
    "function MANAGER_ROLE() view returns (bytes32)",
    "function MINTER_ROLE() view returns (bytes32)",
    "function RANDOM_ROLE() view returns (bytes32)",
    "function _heroNFTContract() view returns (address)",
    "function addPool(uint32 poolID, tuple(uint32 rate, uint256 rangMin, uint256 rangMax)[] randSetArray)",
    "function batchRandomAndMint(uint256 r, uint32 mysteryTp, address to, uint8 batchCount) returns (tuple(address addr, uint256[] tokenIds, uint256[] tokenValues)[] sfts, tuple(address addr, uint256[] tokenIds)[] nfts)",
    "function getPool(uint32 poolID) view returns (tuple(bool exist, tuple(uint32 totalRate, tuple(uint32 rate, uint256 rangMin, uint256 rangMax)[] pool) randPool))",
    "function getRandSource() view returns (address)",
    "function getRandomSet(uint32 mysteryTp) view returns (uint32[] poolIds)",
    "function getRoleAdmin(bytes32 role) view returns (bytes32)",
    "function grantRole(bytes32 role, address account)",
    "function hasPool(uint32 poolID) view returns (bool)",
    "function hasRole(bytes32 role, address account) view returns (bool)",
    "function modifyPool(uint32 poolID, tuple(uint32 rate, uint256 rangMin, uint256 rangMax)[] randSetArray)",
    "function randomAndMint(uint256 r, uint32 mysteryTp, address to) returns (tuple(address addr, uint256[] tokenIds, uint256[] tokenValues)[] sfts, tuple(address addr, uint256[] tokenIds)[] nfts)",
    "function removePool(uint32 poolID)",
    "function renounceRole(bytes32 role, address account)",
    "function revokeRole(bytes32 role, address account)",
    "function setRandSource(address randAddr)",
    "function setRandomSet(uint32 mbTypeID, uint32[] poolIds)",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function unsetRandomSet(uint32 mysteryTp)"
   ]
  }
 }
}