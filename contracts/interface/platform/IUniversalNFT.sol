// SPDX-License-Identifier: MIT
// Metaline Contracts (IUniversalNFT.sol)

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

interface IUniversalNFT is IERC721 {

    /**
    * @dev emit when new token has been minted
    *
    * @param to owner of new token
    * @param tokenId new token id
    * @param fixdata token data that can't modify
    * @param nftdata token data
    */
    event UniversalNFTMint(address indexed to, uint256 indexed tokenId, uint256[] fixdata, uint256[] nftdata);
    
    /**
    * @dev emit when token data modified
    *
    * @param tokenId token id
    * @param nftdata token data
    */
    event UniversalNFTModified(uint256 indexed tokenId, uint256[] nftdata);

    
    /**
     * @dev Creates a new token for `to`, emit {UniversalNFTMint}. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     *
     * @param to new token owner address
     * @param fixdata token data that can't modify
     * @param nftdata token data
     * @return id new token id
     */
    function mint(address to, uint256[] memory fixdata, uint256[] memory nftdata) external returns(uint256 id);
    function mintFixedID(uint256 id, address to, uint256[] memory fixdata, uint256[] memory nftdata) external returns (uint256);

    /**
     * @dev modify token data
     *
     * @param tokenId token id
     * @param nftdata token data
     */
    function modNftData(uint256 tokenId, uint256[] memory nftdata) external;

    /**
     * @dev get token data
     *
     * @param tokenId token id
     * @param nftdata token data
     */
    function getNftData(uint256 tokenId) external view returns(uint256[] memory fixdata, uint256[] memory nftdata);
}